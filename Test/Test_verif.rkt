#lang racket
(require "../Trunk/Verification.rkt")
(provide (all-defined-out))

(define (test-verif-chaine)
  (begin (display "Debut du test pour savoir si une liste est une chaine d'addition : ")
         (if (verif-est-chaine '(1 2 3 6 7 10 20 40 80 87))
             (display ".")
             (raise "Erreur"))
         (if (verif-est-chaine '(1 2 3 6 7 10 20 41 80 87))
             (raise "Erreur")
             (display "."))
         (if (verif-est-chaine '(1 2 4 8 16 20 32))
             (display ".")
             (raise "Erreur"))
         (if (verif-est-chaine '(1 2 3 6 6 7 10 20 41 80 87))
             (raise "Erreur")
             (display "."))
         (if (verif-est-chaine '(1 2 3 6 10 7 20 41 80 87))
             (raise "Erreur")
             (display "."))
         (display "OK\n")))

(define (test-verif-exp-avec-chaine)
  (begin (display "Debut du test pour calculer l'exponentiation rapide avec une chaine donnÃ©e : ")
         (if (= (exp-avec-chaine-donnee 2 '(1 2 3 4 5 9)) 512)
             (display ".")
             (raise "Erreur"))
         (if (= (exp-avec-chaine-donnee 2 '(1)) 2)
             (display ".")
             (raise "Erreur"))
         (if (= (exp-avec-chaine-donnee 2 '(1 2 4 8 16 20 32)) 4294967296)
             (display ".")
             (raise "Erreur"))
         (if (= (exp-avec-chaine-donnee 3 '(1 2 4 6 8 9 16 25 27)) 7625597484987)
             (display ".")
             (raise "Erreur"))
         (display "OK\n")))

(test-verif-chaine)
(test-verif-exp-avec-chaine)