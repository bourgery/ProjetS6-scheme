#lang racket
(provide (all-defined-out))
(require "../Trunk/chaine_binaire_et_ensemble_chaine.rkt")

(define (test-chaine-binaire)
  (begin (display "Debut du test pour les chaines d'additions : ")
         (if (equal? (chaine-binaire 8) '(1 2 4 8))
             (display ".")
             (raise "Erreur"))
         (if (equal? (chaine-binaire 9) '(1 2 4 8 9))
             (display ".")
             (raise "Erreur"))
         (if (equal? (chaine-binaire 15) '(1 2 4 8 12 14 15))
             (display ".")
             (raise "Erreur"))
         (if (equal? (chaine-binaire 42) '(1 2 4 8 16 32 40 42))
             (display ".")
             (raise "Erreur"))
         (display "Ok\n")))

(define (test-ens-chaine-add)
  (begin (display "Debut du test pour l'ensemble des chaines d'additions : ")
         (if (equal? (ens-chaine-add 6) '((1 2 4 6) (1 2 4 5 6) (1 2 3 6) (1 2 3 5 6) (1 2 3 4 6) (1 2 3 4 5 6)))
             (display ".")
             (raise "Erreur"))
         (if (equal? (ens-chaine-add 5) '((1 2 4 5) (1 2 3 5) (1 2 3 4 5)))
             (display ".")
             (raise "Erreur"))
         (if (= (length (ens-chaine-add 9)) 36)
             (display ".")
             (raise "Erreur"))
         (if (= (length (ens-chaine-add 21)) 88697)
             (display ".")
             (raise "Erreur"))
         (display "Ok\n")))

(test-chaine-binaire)
(test-ens-chaine-add)