#lang racket
(require "../Trunk/Methode_facteur_premier.rkt")
(require "../Trunk/Verification.rkt")
(provide (all-defined-out))

(define (test-chaine-plus-petit-diviseur)
  (begin (display "Debut du test pour verifier si la methode du facteur premier fonctionne bien : ")
         (let ([l (chaine-plus-petit-diviseur 6)])
           (if (and (verif-est-chaine l) (equal? l '(1 2 4 6)))
               (display ".")
               (raise "Erreur")))
         (let ([l (chaine-plus-petit-diviseur 2)])
           (if (and (verif-est-chaine l) (equal? l '(1 2)))
               (display ".")
               (raise "Erreur")))
         (let ([l (chaine-plus-petit-diviseur 10)])
           (if (and (verif-est-chaine l) (equal? l '(1 2 4 8 10)))
               (display ".")
               (raise "Erreur")))
         (let ([l (chaine-plus-petit-diviseur 10156)])
           (if (and (verif-est-chaine l) (equal? l '(1 2 4 8 16 24 48 72 144 216 432 864 1728 3456 6912 8640 9504 9936 10152 10156)))
               (display ".")
               (raise "Erreur")))
         (display "OK\n")))

(test-chaine-plus-petit-diviseur)
