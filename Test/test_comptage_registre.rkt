#lang racket
(require "../Trunk/Verification.rkt")
(require "../Trunk/chaine_binaire_et_ensemble_chaine.rkt")
(require "../Trunk/comptage_registre.rkt")
(require "../Trunk/Methode_facteur_premier.rkt")
(provide (all-defined-out))


(define (test-count-nb-register-chaine)
  (begin (display "Debut du test pour verifier si le nombre de registre minimum necessaire est correct : ")
         (let ([l (count-nb-register-chaine '(1 2 3 6 7))])
           (if (equal? l 2)
               (display ".")
               (raise "Erreur")))
	(let ([l (count-nb-register-chaine '(1 2 3 6 8))])
           (if (equal? l 3)
               (display ".")
               (raise "Erreur")))
	(let ([l (count-nb-register-chaine '(1 2 3 4 5 6 7 8 9 10))])
           (if (equal? l 2)
               (display ".")
               (raise "Erreur")))
	(let ([l (count-nb-register-chaine '(1 2 3 4 7 10 17))])
           (if (equal? l 3)
               (display ".")
               (raise "Erreur")))
         (display "OK\n")))

		 
(define (test-count-nb-register)
  (begin (display "Debut du test pour verifier si le nombre de registre minimum necessaire est correct : ")
         (let ([l (count-nb-register 2)])
           (if (equal? l 2)
               (display ".")
               (raise "Erreur")))
	(let ([l (count-nb-register 5)])
           (if (equal? l 2)
               (display ".")
               (raise "Erreur")))
	(let ([l (count-nb-register 43)])
           (if (equal? l 4)
               (display ".")
               (raise "Erreur")))
         (display "OK\n")))
		 
(define (test-chaine-add)
  (begin (display "Debut du test pour verifier si la chaine retournee est bien la plus petite : ")
         (let ([l (chaine-add  16)])
           (if (and (verif-est-chaine l) (equal? l (chaine-binaire 16)))
               (display ".")
               (raise "Erreur")))
	(let ([l (chaine-add 18)])
           (if (and (verif-est-chaine l) (equal? l (chaine-binaire 18)))
               (display ".")
               (raise "Erreur")))
	(let ([l (chaine-add 41)])
           (if (and (verif-est-chaine l) (equal? l (chaine-plus-petit-diviseur 41)))
               (display ".")
               (raise "Erreur")))
         (display "OK\n")))

(test-count-nb-register-chaine)
(test-count-nb-register)
(test-chaine-add)